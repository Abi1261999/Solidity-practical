{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red79\green123\blue61;\red26\green26\blue41;
\red172\green172\blue193;\red70\green137\blue204;\red212\green212\blue212;\red167\green197\blue152;\red45\green175\blue118;
\red31\green133\blue64;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c37647\c54510\c30588;\cssrgb\c13333\c13725\c21176;
\cssrgb\c72941\c73333\c80000;\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c86275;\cssrgb\c70980\c80784\c65882;\cssrgb\c19608\c72941\c53725;
\cssrgb\c12941\c58039\c31765;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
3) Write a Smart Contract for understanding View and Pure Functions in Solidity Programming Language?\
\
Ans. The function do not write anything in the blockchain can be declared as view and pure function.\
\
View function can only real the state and global variables.\
\
Pure fiction cannot read neither state nor global variables.\
\
Pratical \
\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \cb4 \outl0\strokewidth0 \strokec3 // SPDX-License-Identifier: MIT\cf5 \cb1 \strokec5 \
\cf6 \cb4 \strokec6 pragma\cf5 \strokec5  \cf6 \strokec6 solidity\cf5 \strokec5  \cf7 \strokec7 ^\cf8 \strokec8 0.8.13\cf7 \strokec7 ;\cf5 \cb1 \strokec5 \
\
\cf6 \cb4 \strokec6 contract\cf5 \strokec5  ViewandPureFunctions\cb1 \
\cf7 \cb4 \strokec7 \{\cf5 \cb1 \strokec5 \
\cb4     \cf6 \strokec6 uint\cf5 \strokec5  \cf9 \strokec9 public\cf5 \strokec5  number1\cf7 \strokec7 ;\cf5 \cb1 \strokec5 \
\
\cb4     \cf6 \strokec6 function\cf5 \strokec5  viewfuntion\cf7 \strokec7 ()\cf5 \strokec5  \cf9 \strokec9 external\cf5 \strokec5  \cf9 \strokec9 view\cf5 \strokec5  \cf10 \strokec10 returns\cf7 \strokec7 (\cf6 \strokec6 uint\cf7 \strokec7 )\cf5 \cb1 \strokec5 \
\cb4     \cf7 \strokec7 \{\cf5 \cb1 \strokec5 \
\cb4         \cf10 \strokec10 return\cf5 \strokec5  number1\cf7 \strokec7 ;\cf5 \cb1 \strokec5 \
\cb4     \cf7 \strokec7 \}\cf5 \cb1 \strokec5 \
\cb4     \cf6 \strokec6 function\cf5 \strokec5  purefuntion\cf7 \strokec7 ()\cf5 \strokec5  \cf9 \strokec9 external\cf5 \strokec5  \cf9 \strokec9 pure\cf5 \strokec5  \cf10 \strokec10 returns\cf7 \strokec7 (\cf6 \strokec6 uint\cf7 \strokec7 )\cf5 \cb1 \strokec5 \
\cb4     \cf7 \strokec7 \{\cf5 \cb1 \strokec5 \
\cb4         \cf10 \strokec10 return\cf5 \strokec5  \cf8 \strokec8 100\cf7 \strokec7 ;\cf5 \cb1 \strokec5 \
\cb4     \cf7 \strokec7 \}\cf5 \cb1 \strokec5 \
\cb4     \cf6 \strokec6 function\cf5 \strokec5  addtoNumber1\cf7 \strokec7 (\cf6 \strokec6 uint\cf5 \strokec5  number2\cf7 \strokec7 )\cf5 \strokec5  \cf9 \strokec9 external\cf5 \strokec5  \cf9 \strokec9 view\cf5 \strokec5  \cf10 \strokec10 returns\cf5 \strokec5  \cf7 \strokec7 (\cf6 \strokec6 uint\cf7 \strokec7 )\cf5 \cb1 \strokec5 \
\cb4     \cf7 \strokec7 \{\cf5 \cb1 \strokec5 \
\cb4         \cf10 \strokec10 return\cf5 \strokec5  number1 \cf7 \strokec7 +\cf5 \strokec5  number2\cf7 \strokec7 ;\cf5 \cb1 \strokec5 \
\cb4     \cf7 \strokec7 \}\cf5 \cb1 \strokec5 \
\cb4     \cf6 \strokec6 function\cf5 \strokec5  add\cf7 \strokec7 (\cf6 \strokec6 uint\cf5 \strokec5  num1\cf7 \strokec7 ,\cf5 \strokec5  \cf6 \strokec6 uint\cf5 \strokec5  num2\cf7 \strokec7 )\cf5 \strokec5  \cf9 \strokec9 external\cf5 \strokec5  \cf9 \strokec9 pure\cf5 \strokec5  \cf10 \strokec10 returns\cf7 \strokec7 (\cf6 \strokec6 uint\cf7 \strokec7 )\cf5 \cb1 \strokec5 \
\cb4     \cf7 \strokec7 \{\cf5 \cb1 \strokec5 \
\cb4         \cf10 \strokec10 return\cf5 \strokec5  num1\cf7 \strokec7 +\cf5 \strokec5 num2\cf7 \strokec7 ;\cf5 \cb1 \strokec5 \
\cb4     \cf7 \strokec7 \}\cf5 \cb1 \strokec5 \
\cf7 \cb4 \strokec7 \}\cf5 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0

\f0 \cf0 \outl0\strokewidth0 \
}